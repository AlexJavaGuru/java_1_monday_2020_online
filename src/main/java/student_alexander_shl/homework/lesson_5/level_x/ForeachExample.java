package student_alexander_shl.homework.lesson_5.level_x;

/*
Super_task_2:
Найти в интернете информацию про цикл foreach
и как этот цикл применяется на массивах.
 */

class ForeachExample {

    public static void main(String[] args) {

        // Before:
        int[] array = {10, 11, 12, 13, 14, 15};
        int resultSumBefore = 0;
        for (int i = 0; i < array.length; i++) {
            resultSumBefore += array[i];
        }
        System.out.println("Before: " + resultSumBefore);

        // After:
        int resultSumAfter = 0;
        for (int i : array) {
            resultSumAfter = resultSumAfter + i;
        }
        System.out.println("After:  " + resultSumAfter);
    }
}
/*
Цикл "for each" :
впервые цикл "for each" появился в JDK5 (в более ранних версиях JDK этого вида цикла не было).

- это разновидность цикла "for", (его запись более простая, чем у цикла "for") и он используется
для перебора элементов массива или коллекции.

Цикл "for each" очень удобный, когда необходимо вывести на экран все элементы массива/коллекции
или перезаписать все элементы с одного массива/коллекции в другой.

В цикле "for each" тип должен соответствовать типу массива/коллекции.

Цикл "for each" не требует ручного изменения переменной - шага для перебора. Цикл автоматически
выполняет эту работу.

Применение цикла "for each" дает следующие преимущества:
- упрощенность и рациональность представления в сравнении с циклом for;
- не нужно использовать дополнительную переменную цикла, задавать ее начальное значение и условие завершения цикла;
- не нужно индексировать массив.

Ограничения применения цикла "for each":
- нельзя пройти по циклу в обратном порядке (с конца - в начало);
- нельзя внести ИЗМЕНЕНИЯ в массив;
- нельзя найти элемент в массиве и вернуть (или передать дальше) ИНДЕКС искомого элемента.

 */
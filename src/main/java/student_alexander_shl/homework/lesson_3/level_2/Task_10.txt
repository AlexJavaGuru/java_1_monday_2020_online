Тема: Самостоятельное изучение класса String.

Поищите в интернете информацию про класс String в Java.
Прочтите несколько статей. Попробуйте найти ответы на
следующие вопросы:

- Где ханитятся обьекты класса String?
- Как определить длину строки?
- Как сравнивать две строки?

- Что такое String Pool и зачем он нужен? - это сложный вопрос!
Кто разберётся и сможет обьяснить заслужит +1 к карме.

и т.д.

Ответ:


- Где ханитятся обьекты класса String?
Класс String представляет последовательность символов в формате кодировки UTF-16,
которая поддерживает множество языков.

Для оптимальной работы приложения JVM делит память на область стека (stack) и область
кучи (heap). Всякий раз, когда мы объявляем новые переменные, создаем объекты или вызываем
новый метод, JVM выделяет память для этих операций в стеке или в куче.

Все объекты в Java хранятся в куче. "Переменные", которые содержат ссылки на них,
могут находиться в стеке, или они могут содержаться в других объектах
(тогда они не являются действительно переменными, но полями), что также помещает их в кучу.

Объекты класса, которые определяют классы, также являются объектами кучи.
Они содержат байт-код, который составляет класс (загружается из файлов классов),
и метаданные, вычисленные из этого.

Пример:
ссылочная переменная (программы) хName типа String будет создана в стеке,
но сама строка будет храниться в области, называемой String Pool (является частью Кучи).

- Как определить длину строки?
метод length(), который определяет длину строки - относится к методам, используемых
для получения информации об объекте и известны как методы доступа.
метод length(), он определяет количество символов, содержащихся в строковом объекте.

Ниже пример:

public class Test {

   public static void main(String args[]) {
      String s = "Я стану приличным программистом!";
      int len = s.length();

      System.out.println( "Длина строки: " + len + " символ.");
   }
}

Прогнозируемый результат:  Длина строки: 32 символа.
(пробел между символами\словами тоже входит в калькуляцию\считается).


- Как сравнивать две строки?

Для сравнения строк используются методы:
- equals()
пример сравнения строк с помощью == и метода equals():

public class EqualStrings {
    public static void main(String[] args) {
        String s1 = "Java";
        String s2 = "Java";
        String s3 = new String("Java");
        String s4 = new String(s1);
        System.out.println("s1==s2 : " + (s1 == s2));
        System.out.println("s3==s4 : " + (s3 == s4));
        System.out.println("s1==s3 : " + (s1 == s3));
        System.out.println("s1 equals s2 : " + s1.equals(s2));
        System.out.println("s1 equals s3 : " + s1.equals(s3));

- equalsIgnoreCase(), который не учитывает регистр символов:
пример сравнения строк:

public class EqualsDemo {
    public static void main(String[] args) {
        String s1 = "Hello";
        String s2 = "Hello";
        String s3 = "Good-bye";
        String s4 = "HELLO";
        System.out.println(s1 + " equals " + s2 + " -> "
                + s1.equals(s2));
        System.out.println(s1 + " equals " + s3 + " -> "
                + s1.equals(s3));
        System.out.println(s1 + " equals " + s4 + " -> "
                + s1.equals(s4));
        System.out.println(s1 + " equalsIgnoreCase " + s4 + " -> "
                + s1.equalsIgnoreCase(s4));


- Что такое String Pool и зачем он нужен?

В Java существует так называемый String Pool, в котором хранятся созданные строки.
При создании очередной строки, JVM сначала ищет такую строку в String Pool.
Если такая строка уже есть, то она предлагается (возвращается) вместо создания новой.

Объекты класса String являются неизменяемыми (immutable).

Строки и особенно строковые литералы широко используются в типичном коде Java.
И они неизменны. А неизменяемость позволила кэшировать строку для экономии памяти и
увеличения производительности (меньше усилий на создание, меньше мусора для сбора).

String Pool не используется, если строка создается с помощью конструктора.
В этом случае гарантированно создается новый объект.
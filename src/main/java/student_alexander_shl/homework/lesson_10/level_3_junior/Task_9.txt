Найдите в интернете информацию про класс java.util.Optional.
Для чего применяются объекты этого класса?
Какие два состояния могут быть у объектов этого класса?
Как создаются экземпляры данного класса?
Как можно проверить в каком состоянии находится экземпляр данного класса?
Как можно получить объект, который находится внутри Optional?

Ответ:

Часть Первая (теория)

В Java 8 появился новый класс Optional призванный помочь разработчикам в обработке NullPointerException.
Естественно Optional не дает никакой гарантии избавления от NullPointerException и все проверки на null можно
было описывать и раньше, но с Optional это действия становятся быстрее и проще, так как дополнительные методы
для проверки объекта или проверки и каких-то дальнейших действий с объектом уже описаны и нам осталось только
воспользоваться ими в своем коде.
А также Optional помогает придать большую информативность коду, повышает его читабельность.

Если вы используете идею Java IDE , такую как JetBrains IntelliJ, Eclipse или Netbeans, или инструмент,
такой как findbugs, у вас есть @Nullable и @NotNull. Это хороший способ позволить компилятору проверить
что-то больше, чем он обычно делает, и заставить ваши контракты быть сильнее.
К сожалению, он поддерживается не всеми компиляторами.

В первом приближении Optional — это программный аналог футляра физического объекта, например – очков.
Лежит ли объект внутри футляра, вы можете узнать с помощью метода isPresent().
Если он там лежит, вы можете взять его с помощью метода get().

Часть Вторая (с примерами)

Этот класс призван чтобы спасти нас от NullPointerException дальше (NPE) и от проверок на null.

Optional - это класс оболочка, которая внутри себя содержит некоторое значение которое может быть NULL и
если  это значение является NULL'ом, может предпринять какие-то действия, например бросить исключение или
подставить значение по-умолчанию.

Класс Optional нельзя создать прямым образом через new. Он имеет приватный конструктор. Но для его создания
существуют следующие статические методы:

- Optional.empty() Этот метод создает пустой класс Optional.

Пример:
                 public Optional<String> getClient() {
                    return Optional.empty();
                 }
Здесь просто создается метод getClient() который возвращает Optional<String>, но так как у нас нет
имплементации этого метода, то мы просто возвращаем Optional.empty(), вернется Optional<String> но внутри он
будет содержать значение null.

- Optional.of(T value) Создает опционал с определенно не null значением.
Этот метод нужно использовать только тогда, когда вы уверены что значение не является null.
Если вы попробуете сделать следующий вызов

                       public Optional<String> getClient() {
                          return Optional.of(null);
                       }
То данный код скомпилируется, но при попытке запуска все сломается.

- Optional.ofNullable(T value) Этот метод можно использовать в ситуации когда значение может быть null, а
может и не быть.
Пример:

                               public Optional<Client> getClient(String username) {
                                  Client client = Client.find()
                                           .where()
                                           .eq("username", username)
                                           .fetchUnique();

                                  return Optional.ofNullable(client);
                               }
Этот метод ищет клиента и возвращает его как опционал.
Мы можем ничего не найти в базе данных и нам вернется null. Мы его можем передать в опционал.
И все будет работать. Именно этот опционал и является самым часто используемым.
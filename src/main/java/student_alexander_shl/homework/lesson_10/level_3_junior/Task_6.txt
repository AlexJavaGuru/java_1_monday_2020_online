Что такое функциональный интерфейс в Java?

Найдите в интернете информацию об этом.
Придумайте и реализуйте его в виде программного кода.
В коментарии в коде напишите ответ на вопрос.

Ответ:

Функциональные интерфейсы в Java 8 – это интерфейсы, которые содержат в себе только один абстрактный метод.

Пример:

Первый -
interface Interface1 extends functionalInterface{
}

Второй –
interface Interface2 extends functionalInterface{
    @Override
    abstract public void abstractMethod();
}

Третий –
interface Interface3 extends functionalInterface{
    public default void defMethod(){};
}

Первый – не содержит в себе никаких методов, но наследует абстрактный метод от родительского интерфейса.

Второй – содержит в себе один абстрактный метод, который переопределяет метод родительского интерфейса.

Третий – содержит в себе метод по умолчанию, который абстрактным не является, но интерфейс так же наследует
абстрактный метод, который наследуется от родительского интерфейса.

И не важно сколько методов по умолчанию или статичных методов в функциональном интерфейсе, главное, чтобы
был только один абстрактный метод.
Все три вышеприведенных интерфейса являются функциональными.

Наличие 1 абстрактного метода - это единственное условие, таким образом функциональный интерфейс может
содержать так же default и static методы.

К функциональному интерфейсу рекомендуется добавлять @FunctionalInterface.Это позволит использовать интерфейс
в лямбда выражениях,не остерегаясь того,что кто-то добавит в интерфейс новый абстрактный метод и он перестанет
быть функциональным.
Это не обязательно, но при наличии данной аннотации код не скомпилируется, если будет больше или меньше,чем
1 абстрактный метод.

Но есть один тонкий момент, описанный в Java Language Specification: “interfaces do not inherit from Object,
but rather implicitly declare many of the same methods as Object.”
Это означает, что функциональные интерфейсы могут содержать дополнительно абстрактные методы, определенные в
классе Object !!!

В JDK (начиная с JDK 8) представлены собственные функциональные интерфейсы, которые представлены в пакете
java.util.function:
- Supplier (поставщик) используется для создание какого-либо объекта без использования входных параметров;
- Consumer (потребитель) используется в том случае, если нам нужно применить какое-то действие или операцию
к параметру (или к двум параметрам для BiConsumer) и при этом в возвращаемом значении нет необходимости;
- Predicate (утверждение) наиболее часто применяется в фильтрах и сравнении;
- Function (функция) используется для преобразования входного параметра или в двух параметров (для BiFunction)
в какое-либо значение, тип значение может не совпадать с типом входных параметров;
- UnaryOperator и BinaryOperator это разновидность Function,в которых входные и выходные обобщенные параметры
должны совпадать.

Функциональные интерфейсы имеют тесную связь с лямбда выражениями и служат как основа для применения лямбда
выражений в функциональном программировании на Java.
Основное назначение – использование в лямбда выражениях и method reference.

Лямбда выражение обобщенным быть не может,так как указывать параметр типа в лямбда выражении нельзя. Подобное
ограничение не накладывается на функциональный интерфейс, который в отличии от лямбда-выражений может быть
обобщенным. При использовании обобщенного функционального интерфейса тип лямбда-выражения отчасти определяется
аргументом типа или аргументами, которые указываются при объявлении ссылки на функциональный интерфейс.
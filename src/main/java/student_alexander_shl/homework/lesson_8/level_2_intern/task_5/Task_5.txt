Что такое множественное наследование
в программировании?
Разрешено ли множественное наследование в Java?

Ответ:

Множественное наследование – способность создавать классы с множеством классов-родителей.
В отличии от других  популярных объектно-ориентированных языков, вроде С++, язык Java
не поддерживает множественное наследование классов.

Проблема множественного наследования заключается в том, что два класса могут определять
разные способы выполнения одного и того же действия, и подкласс не может выбрать,
какой из них выбрать.

Java не поддерживает множественное наследование по двум причинам:

- в java каждый класс является потомком Object класса. Когда он наследуется от более чем
одного суперкласса, подкласс получает вероятность столкнуться с «проблемой алмаза»,
при выборе (чтобы приобрести) свойства класса объектов;
- в java каждый класс имеет конструктор, если мы пишем его явно или вообще не пишем.
Первый оператор вызывает super() для вызова конструктора класса supper. Если класс имеет
более одного суперкласса, он запутывается. Поэтому, когда один класс расширяется из
более чем одного суперкласса, мы получаем ошибку времени компиляции.

Java предпочитает обеспечивать комплексный подход для решения вышеуказанной проблемы,
используя лучшие варианты из тех, которыми возможмо достичь аналогичный результат
наследования.

Java не допускает наследования от нескольких классов (тем не менее он допускает
наследование от нескольких интерфейсов), потому что интерфейсы определяют только то,
"ЧТО" делает класс, а не то, "КАК" он это делает.
Интерфейсы – это только  резервирование/описание метода, а реализация самого метода будет
в конкретном классе, реализующем эти интерфейсы, таким образом нет никакой возможности
столкнуться с неопределенностью при множественном наследовании интерфейсов.
Вот почему классы в Java могут наследоваться от нескольких интерфейсов.